{% extends 'base.html.twig' %}

{% block body %}


    <div class="container-fluid" id="formulaire1">

        <div class="col-lg-4 col-sm-8 col-md-8 mx-auto col-12" id="search-address-wrap">
            <form action="/" method="POST" id="form">

                <div class="col-lg-12 col-sm-12 col-md-12 mx-auto col-12">
                    <label for="name"><h2>Recherchez un Nom</h2></label><br>
                    <input style="text-align: center" class="form-control" type="text" id="name" name="name" placeholder="Entrez un nom..." autofocus><br><br>
                </div>

                <div class="col-lg-12 col-sm-12 col-md-12 mx-auto col-12">
                    <label for="adress"><h2>Rechercher une adresse</h2></label><br>
                    <input style="text-align: center" class="form-control" type="text" id="adress" name="adress" placeholder="Entrez une adresse..." autofocus><br><br>
                </div>

                <button id="search-btn" type="submit" class="animated bounceInLeft btn btn-success btn-lg" name="button"><i class="fa fa-search" aria-hidden="true"></i>
                     Rechercher</button>
                <br><br>
            </form>
        </div>
        <br>
        <br>
        <a href="#" class="criteres">
          Autres critères de recherche
        </a>
        <div class="col-lg-6 col-sm-8 col-md-8 mx-auto col-12">
          <form class="searchitems hidden" action="" method="post">
            <div class="form-row">
              <div class="form-group col-md-5">
                <label for="commune">Saisir le nom de commune</label>
                <input type="text" name="commune" value="" placeholder="Nom de la commune">
              </div>
              <div class="form-group col-md-5 offset-md-1">
                <label for="nom">Saisir le nom de l'établissement</label>
                <input type="text" name="nom" value="" placeholder="Nom de l'établissement" >
              </div>
            </div>
            <label for="">Type d'activités</label>
            <select class="form-control" name="type">
              <option value="null">Non précisé</option>
              {% for type in typesErp %}
              <option value="{{type.typeactiviteCode}}">{{type.typeactiviteNom}}</option>
              {% endfor %}
            </select>
            <button type="submit" class="btn btn-secondary search-btn-criteres" name="button" value="submit">Recherche avec ces critères</button>
            <!-- <input type="submit" name="submit" value="Recherche avec ces critères"> -->
          </form>
        </div>
        <!-- <button class="btn btn-secondary location-browser map-btn">Autour de moi</button> -->
        <div class="storage" data-lat="45.750000" data-lng="4.850000" data-limit="34" ></div>
        <div class="adresse_autocomplete" data-adress=""></div>
        <div class="id_autocomplete" data-iditem=""></div>
        <div class="row">
            <div class="col-12 col-sm-12 col-md-12 col-lg-10 mx-auto">
                <div id="message" class="alert"></div>
            </div>
            <br>
            <div class="col-12 col-sm-12 col-md-12 col-lg-10 mx-auto">
                <div id="error_location" class="alert"></div>
            </div>
            <br>
            <br>
            <table style="margin-top: 20px" class="col-12 col-sm-12 col-md-12 col-lg-10 mx-auto table-bordered table-striped" id="result" border='1'>
                <tr>
                </tr>
            </table>
            <br>
            <div class="col-12 col-sm-12 col-md-12 col-lg-10 mx-auto">
                <div id="message2" class="alert"></div>
            </div>
            <br>
            <div class="col-10 mx-auto" id="map"></div>
            <div class="col-11 col-lg-10 mx-auto">
            </div>
        </div>

        <br>

        <p class="alert alert-info col-4 mx-auto">Pour consulter les Précautions d'usage, cliquez <a href=".model-id2" data-toggle="modal">ici</a></p>
        <div tabindex="-1" class="modal fade model-id2" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 style="text-decoration: underline">Ce site est un site officiel, développé par les services de l’État dans le Rhône.</h2>
                    </div>
                    <div style="text-align: left" class="modal-body">
                        <p><span style="color: green">Il permet </span>de vérifier, pour un établissement recevant du public donné, s’il satisfait à ses obligations réglementaires en termes d’accessibilité aux personnes en situation de handicap par une démarche menée dans le Rhône : <ul><li>soit par une attestation de conformité.</li><li>soit par un agenda d’accessibilité programmée (Ad’AP) validé par le préfet à travers lequel le propriétaire ou l’exploitant s’est engagé à rendre conforme l’établissement dans un délai donné.</li></ul>
                            <span style="font-weight: bold">AUCUN CONTRÔLE SUR PLACE DES ELEMENTS DECLARATIFS CONTENUS DANS CES DOCUMENTS N’EST EXERCE PAR L’ADMINISTRATION.</span>
                        </p>
                        <p><span style="color: red">Il ne permet pas :</span><ul><li>de connaître les établissements entièrement accessibles : un établissement bénéficiant de dérogations pour les aspects ne respectant pas la réglementation est considéré comme conforme ;</li><li>de connaître l’intégralité des établissements du département du Rhône ayant satisfait à leurs obligations : certains ont pu faire l’objet d’un dépôt de documents en préfecture du siège régional ou du siège social.</li></ul></p>
                        <hr style="height: 1px">
                        <p><span style="font-weight: bold">ATTENTION</span> : ce site est en construction. Malgré tous nos efforts, il est possible que certaines fonctionnalités fonctionnent mal et que certaines données soient incomplètes ou aient fait l’objet d’une erreur de saisie. Merci de nous aider à l’améliorer en signalant tout bug ou erreur sur le nom ou l’adresse de l’ERP.</p>

                        <p>Vous êtes gestionnaire ou propriétaire d’un établissement et vous n’avez déposé ni attestation ni  Ad’AP ? Tout savoir pour régulariser votre situation <a href="http://www.rhone.gouv.fr/Politiques-publiques/Amenagement-du-territoire-urbanisme-construction-logement/Accessibilite/Accessibilite-des-Etablissements-Recevant-du-Public-ERP">ici</a>.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
<script>
            $(function() {
                // function that add the item to the form on click
                var idsitem = []; // array that holds id for item autocompleted
                var strings = []; // array that holds value of item autocompleted
                function log( message ) {
                    // debugger;
                    $( "<div>" ).text( message ).prependTo( "#log" );
                    $( "#log" ).scrollTop( 0 );
                }
                $( "#name" ).autocomplete({
                    source: function (request, response) {
                        $.get("liste/autocomplete_name",  {
                            term: request.term
                        }, function (data) {
                            strings = [];
                            idsitem = [];
                            $.each(data, function(i, e) {
                                strings[i] = e["name"] + " | " + e["adress"];
                                idsitem[i] = e['id'];
                            })
                            if (strings) {
                                response(strings)
                            };
                        });
                    },
                    minLength: 1,
                    select: function( event, ui) {
                        var indexArr = arraySearch(strings, ui.item.value); // index of strings so we can retrieve the id of the item
                        var id = idsitem[indexArr];
                        // document.getElementsByClassName('id_autocomplete').attr('data-iditem').value = id;
                        $('.id_autocomplete').data('iditem', id);
                        // debugger;
                        log( ui.item ?
                            "Selected: " + ui.item.value + " aka " + ui.item.id :
                            "Nothing selected, input was " + this.value );
                    }
                });


                function arraySearch(arr,val) {
                    // debugger;
                    for (var i=0; i<arr.length; i++)
                        if (arr[i] === val)                    
                            return i;
                    return false;
                }
            });
    //     </script>
<script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBapkuSxVaHJ0CZhOBk3H4NnHARd4H_btk&libraries=places&callback=initMap">
    </script>
    <script>

        $(document).ready(function() {

            var isBtnClicked = 0;
            $('.criteres').click(function(e){
                e.preventDefault();
                isBtnClicked = !isBtnClicked;
                isBtnClicked ? $('.criteres').html('Réduire') : $('.criteres').html('Autres critères');
                isBtnClicked ? $('#result').removeClass('hidden') : $('#result').addClass('hidden');
                isBtnClicked ? $('#message').parent().removeClass('basicHeight') : $('#message').parent().addClass('basicHeight');
                isBtnClicked ? $('#message').removeClass('hidden') : $('#message').addClass('hidden');
                $('.searchitems').toggle();
                clearFields();
            });
          })

        function initMap() {
            var markerArray = [];// Array of google map marker object
            var bounds = new google.maps.LatLngBounds();
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 45.750000, lng: 4.850000},
                zoom: 13
            });
            var geocoder = new google.maps.Geocoder();

            var input = /** @type {!HTMLInputElement} */(
                document.getElementById('adress'));
            var options =   { types: ['geocode'], 
                                componentRestrictions: {country: 'fr'}
                            }

            var autocomplete = new google.maps.places.Autocomplete(input, options);
            autocomplete.bindTo('bounds', map);
            // document.getElementById('search-btn').addEventListener('click', function(e) {
            //     // e.preventDefault();
            //     var geocoder = new google.maps.Geocoder();
            //     // If we want to delete all markers before displaying the one geocoded:
            //     // remove every marker then setup the array to null
            //     // Removing marker inside a funciton deosn't seems to work, strangely
            //     for (var i = 0; i < markerArray.length; i++) {
            //       markerArray[i].setMap(null);
            //     }
            //     markerArray = [];
            //     geocodeAddress(geocoder, map, markerArray);
            // });

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                var address = place.address_components;
                // We check wether or not the dpt from address autocompleted is 'en service'
                var dpt = address.some(function(e) {
                    if (e.types.includes('administrative_area_level_2')) {
                        $.post('/checkdpt', {'dpt': e.short_name}).success(function(data) {
                            if (data.status == false) {
                                var error = "Ce service n'est actuellement pas disponible pour le département "+data.message+"."
                                $('#message').removeClass('alert-success');
                                $('#message').addClass('alert-danger');
                                $('#message').html(error);
                            }
                            else {
                                $('#message').removeClass('alert-success');
                                $('#message').removeClass('alert-danger');
                                $('#message').html('');
                                if (!place.geometry) {
                                    window.alert("impossible de localiser '" + place.name + "'");
                                    return;
                                }
                                if (place.geometry.viewport) {
                                    map.fitBounds(place.geometry.viewport);
                                } else {
                                    map.setCenter(place.geometry.location);
                                }
                                // marker.setIcon(/** @type {google.maps.Icon} */({
                                //     url: place.icon,
                                //     size: new google.maps.Size(71, 71),
                                //     origin: new google.maps.Point(0, 0),
                                //     anchor: new google.maps.Point(17, 34),
                                //     scaledSize: new google.maps.Size(35, 35)
                                // }));
                                marker.setPosition(place.geometry.location);
                                marker.setVisible(true);

                                var address = '';
                                if (place.address_components) {
                                    address = [
                                        (place.address_components[0] && place.address_components[0].short_name || ''),
                                        (place.address_components[1] && place.address_components[1].short_name || ''),
                                        (place.address_components[2] && place.address_components[2].short_name || '')
                                    ].join(' ');

                                    var addressMinified = [
                                        (place.address_components[1] && place.address_components[1].short_name || '')
                                        ].join(' ');
                                    var number = [
                                        (place.address_components[0] && place.address_components[0].short_name || '')
                                        ].join(' ');
                                    $.post('/erps_list_autocompleted',{'address': addressMinified, 'number': number}).success(function(data) {
                                        $('#result').empty();
                                        if (data.length > 1) {
                                            $('#message').removeClass('alert-danger');
                                            $('#message').addClass('alert-success');
                                            $('#message').html(data.length+' erps trouvés à cette adresse');
                                        } else if (data.length == 1){
                                            $('#message').removeClass('alert-danger');
                                            $('#message').addClass('alert-success');
                                            $('#message').html(data.length+' erp trouvé à cette adresse');
                                        } else {
                                            $('#message').addClass('alert-danger');
                                            $('#message').removeClass('alert-success');
                                            $('#message').html('Aucun erps trouvés à cette adresse');
                                        }
                                        var result = '';
                                        for (var i=0; i < data.length; i++) {
                                            if (data[i].accessible == null) {
                                                result += "<tr><td>L'établissement "+data[i].listeErpNomErp+" sera accessible d'ici "+data[i].mois+" "+data[i].annee+".</td></tr>";
                                            } else {
                                                result += "<tr><td>L'établissement "+data[i].listeErpNomErp+" est accessible.</td></tr>";
                                            }
                                        }
                                        $('#result').append(result);
                                    })
                                }
                                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                                infowindow.open(map, marker);

                                document.getElementsByClassName('storage')[0].attributes[1].value = marker.position.lat();
                                document.getElementsByClassName('storage')[0].attributes[2].value = marker.position.lng();
                            }
                        })
                    }
                })
                // if (dpt) {
                // }
                // else {
                // }
            });

            // Those are buttons on the google map:
            var aroundMeControlDiv = document.createElement('div');
            var aroundMeControl = new AroundMeControl(aroundMeControlDiv, bounds, map, markerArray);
            aroundMeControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.LEFT_CENTER].push(aroundMeControlDiv);

            var aroundThisLocationDiv = document.createElement('div');
            var aroundThisLocationControl = new AroundThisLocationControl(aroundThisLocationDiv, bounds, map, markerArray);
            aroundThisLocationDiv.index = 2;
            map.controls[google.maps.ControlPosition.LEFT_TOP].push(aroundThisLocationDiv);

            var reportAdressControlDiv = document.createElement('div');
            var reportAdressControl = new ReportAdressControl(reportAdressControlDiv);
            reportAdressControlDiv.index = 3;
            map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(reportAdressControlDiv);

            // selector for the form that hold 3 criteria
            $('.searchitems').on('submit', function(event) {
                event.preventDefault();
                var commune = $(this)[0][0].value;
                var nom = $(this)[0][1].value;
                var type = $(this)[0][2].value;
                var result = $('#result');
                var message = $('#message');

                // /!\ CHECK CONDITIONS /!\
                if (type !== "null" && commune.length == 0 && nom.length == 0) {
                    message.removeClass('alert-success col-lg-10 mx-auto');
                    message.addClass('alert-danger col-lg-10 mx-auto');
                    return document.getElementById('message').innerHTML = "Veuillez sélectionner au moins 2 critères.";
                }
                else if (type == "null" && (commune.length == 0 || nom.length == 0)) {
                    message.removeClass('alert-success col-lg-10 mx-auto');
                    message.addClass('alert-danger col-lg-10 mx-auto');
                    return document.getElementById('message').innerHTML = "Veuillez sélectionner au moins 2 critères.";
                }
                message.removeClass('alert-danger col-lg-10 mx-auto');
                document.getElementById('message').innerHTML = "";

                // /!\ END CHECK CONDITION /!\
                for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                }
                markerArray = [];
                search_criteria(commune, nom, type, map, bounds, markerArray, message);
            })

            $('#form').on('submit', function() {
                var id = $('.id_autocomplete').data('iditem');
                var message = $('#message2');
                for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                }
                markerArray = [];
                getSingleErpFromForm(id, message, map, markerArray, geocoder);
                return false;
            })
        }

        function displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray) {
            $.post('/around',{'limit':limit,'lat':lat,'lng':lng}).done(function(data) {
                // numbers need to be in float
                // iterate over data that is rendered by the controller
                for( i = 0; i < ((data.length) -1); i++ ) {
                  // Setup the position of the marker dynamically via it's info
                  // try to geocode the erp via the full adress if known
                    var position = new google.maps.LatLng(parseFloat(data[i].listeerpLatitude), parseFloat(data[i].listeerpLongitude));
                    // extends bounds of the map to the position of the marker
                    bounds.extend(position);

                    var info =  "<div><p>"+data[i].listeErpNomErp+"<p>"+
                        "<p>"+data[i].address+"<p>"+
                        "<p>Est accessible</p></div>";

                    if (data[i].accessible == null) {
                        var info = "<div><p>"+data[i].listeErpNomErp+"<p>"+
                            "<p>"+data[i].address+"<p>"+
                            "<p>Acessible d'ici "+data[i].mois+" "+data[i].annee+"</p></div>";
                    }
                    // create a blue marker everytime
                    var marker = new google.maps.Marker({
                      map: map,
                      position: position,
                      icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                      // info: data[i].liste_ERP_nom_erp + data[i].address,
                      info: info
                    });
                    // extends the map to fit bounds so we have every marker displayed on the map
                    map.fitBounds(bounds);
                    //foreach marker, create an event that open a window with the name of the erp (through info)
                    var infowindow = new google.maps.InfoWindow();
                    google.maps.event.addListener(marker, 'click', function () {
                      infowindow.setContent(this.info);
                      infowindow.open(map, this);
                    });
                    markerArray.push(marker);
                }
                //Keep the color for the last one that represent the location from where the user is searching
                var last = data.pop();
                var position = new google.maps.LatLng(parseFloat(last.listeerpLatitude), parseFloat(last.listeerpLongitude));
                bounds.extend(position);
                var marker = new google.maps.Marker({
                  map: map,
                  position: position,
                  info: last.listeErpNomErp,
                });
                var infowindow = new google.maps.InfoWindow();
                google.maps.event.addListener(marker, 'click', function () {
                  infowindow.setContent(this.info);
                  infowindow.open(map, this);
                });
                // Push every marker into an array so i can reset the array and clear the map for another research
                markerArray.push(marker);
                map.fitBounds(bounds);
            });
        }

        function geocodeAddress(geocoder, map, markerArray) {
            // document.getElementById('result').innerHTML = "";
            // document.getElementById('message').innerHTML = "";
            // $('#message').removeClass('alert-danger');
            // $('#message').removeClass('alert-success');
            // var address = document.getElementById('adress').value
            var name = document.getElementById('name').value
            // data = address ? address : null
            // if(!data) data = name ? name : null
            data = name;
            data = data.split("|")[1];
            if (data == " ") {
                return false;
            }
            geocoder.geocode({'address': data}, function(results, status) {
                if (status === 'OK') {
                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    markerArray.push(marker);
                    // Retrive lat and lng of marker and push it in data attr
                    document.getElementsByClassName('storage')[0].attributes[1].value = marker.position.lat();
                    document.getElementsByClassName('storage')[0].attributes[2].value = marker.position.lng();

                    $('#error_location').removeClass('alert-danger');
                    $('#error_location').html('');
                } else {
                }
            });
        }


        function AroundMeControl(aroundMeControlDiv, bounds, map, markerArray) {

          // Set CSS for the aroundmecontrol border.
          var aroundMeUI = document.createElement('div');
          aroundMeUI.style.backgroundColor = 'rgb(255, 160, 67)';
          aroundMeUI.style.border = '2px solid rgb(255, 160, 67)';
          aroundMeUI.style.borderRadius = '3px';
          aroundMeUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
          aroundMeUI.style.cursor = 'pointer';
          aroundMeUI.style.marginBottom = '22px';
          aroundMeUI.style.textAlign = 'center';
          aroundMeUI.title = 'Cliquez pour savoir quel(s) erp(s) est(sont) à proximité(s) de vous';
          aroundMeControlDiv.appendChild(aroundMeUI);

          // Set CSS for the control interior.
          var aroundMeText = document.createElement('div');
          aroundMeText.style.color = 'rgb(25,25,25)';
          aroundMeText.style.fontFamily = 'Roboto,Arial,sans-serif';
          aroundMeText.style.fontSize = '12px';
          aroundMeText.style.lineHeight = '30px';
          aroundMeText.style.paddingLeft = '5px';
          aroundMeText.style.paddingRight = '5px';
          aroundMeText.innerHTML = 'Autour de moi';
          aroundMeUI.appendChild(aroundMeText);

          // Setup the click event listeners: locate the user
          aroundMeUI.addEventListener('click', function() {
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(function(position) {
                // get current position
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;
                var limit = parseInt($('.storage')[0].attributes[3].value);
                for (var i = 0; i < markerArray.length; i++) {
                  markerArray[i].setMap(null);
                }
                markerArray = [];
                bounds = new google.maps.LatLngBounds();
                displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray);
              }, function() {
                handleLocationError(true, map, map.getCenter());
              });
              } else {
              // Browser doesn't support Geolocation
              handleLocationError(false, map, map.getCenter());
              }
          });

        }

        function AroundThisLocationControl(aroundThisLocationDiv, bounds, map, markerArray) {

          // Set CSS for the control border.
          var aroundThisLocationUI = document.createElement('div');
          aroundThisLocationUI.style.backgroundColor = 'rgb(255, 160, 67)';
          aroundThisLocationUI.style.border = '2px solid rgb(255, 160, 67)';
          aroundThisLocationUI.style.borderRadius = '3px';
          aroundThisLocationUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
          aroundThisLocationUI.style.cursor = 'pointer';
          aroundThisLocationUI.style.marginBottom = '22px';
          aroundThisLocationUI.style.textAlign = 'center';
          aroundThisLocationUI.title = 'Cliquez pour savoir quel(s) erp(s) est(sont) à proximité(s) de ce point';
          aroundThisLocationDiv.appendChild(aroundThisLocationUI);

          // Set CSS for the control interior.
          var aroundThisLocationText = document.createElement('div');
          aroundThisLocationText.style.color = 'rgb(25,25,25)';
          aroundThisLocationText.style.fontFamily = 'Roboto,Arial,sans-serif';
          aroundThisLocationText.style.fontSize = '12px';
          aroundThisLocationText.style.lineHeight = '30px';
          aroundThisLocationText.style.paddingLeft = '5px';
          aroundThisLocationText.style.paddingRight = '5px';
          aroundThisLocationText.innerHTML = 'Autour de ce point';
          aroundThisLocationUI.appendChild(aroundThisLocationText);

          // Setup the click event listeners: geolocate the user
          aroundThisLocationUI.addEventListener('click', function() {
            var lat = parseFloat($('.storage')[0].attributes[1].value);
            var lng = parseFloat($('.storage')[0].attributes[2].value);
            var limit = parseInt($('.storage')[0].attributes[3].value);
            for (var i = 0; i < markerArray.length; i++) {
              markerArray[i].setMap(null);
            }
            markerArray = [];
            bounds = new google.maps.LatLngBounds();
            displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray);
          });

        }

        function ReportAdressControl(reportAdressControlDiv) {

          var reportAdressUI = document.createElement('div');
          reportAdressUI.style.backgroundColor = 'rgb(255, 160, 67)';
          reportAdressUI.style.border = '2px solid rgb(255, 160, 67)';
          reportAdressUI.style.borderRadius = '3px';
          reportAdressUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
          reportAdressUI.style.cursor = 'pointer';
          reportAdressUI.style.marginBottom = '22px';
          reportAdressUI.style.textAlign = 'center';
          reportAdressUI.title = 'Cliquez pour savoir quel(s) erp(s) est(sont) à proximité(s) de ce point';
          reportAdressControlDiv.appendChild(reportAdressUI);

          var reportAdressText = document.createElement('div');
          reportAdressText.style.color = 'rgb(25,25,25)';
          reportAdressText.style.fontFamily = 'Roboto,Arial,sans-serif';
          reportAdressText.style.fontSize = '12px';
          reportAdressText.style.lineHeight = '30px';
          reportAdressText.style.paddingLeft = '5px';
          reportAdressText.style.paddingRight = '5px';
          reportAdressText.innerHTML = 'Signalez une adresse';
          reportAdressUI.appendChild(reportAdressText);

          reportAdressUI.addEventListener('click', function() {
            window.location = "/report/new";
          });

        }

        function search_criteria(commune, nom, type, map, bounds, markerArray, message) {
          $.post('/search_list',{'commune':commune,'nom':nom, 'type':type}).done(function(data) {
            document.getElementById('result').innerHTML = "";
            var result = '';
            for (var i = 0; i < data.length; i++) {
              // result += '<tr><td>' + data[i].listeErpNomErp + ' | ' + data[i].listeerpNomCommune + '</td></tr>';
              if (data[i].accessible == null) {
                result += "<tr><td>L'établissement "+data[i].listeErpNomErp+" sera accessible d'ici "+data[i].mois+" "+data[i].annee+".</td></tr>";
              }
              else {
                result += "<tr><td>L'établissement "+data[i].listeErpNomErp+" est accessible.</td></tr>";
              }
              // debugger;

              // If the erp has latitude and long in ddb we take it, otherise we don't display it on the map
              if (parseFloat(data[i].listeerpLatitude) != 0) {
                // try to geocode via the full address if known (look end of file )
                var position = new google.maps.LatLng(parseFloat(data[i].listeerpLatitude), parseFloat(data[i].listeerpLongitude));

                // // extends bounds of the map to the position of the marker
                bounds.extend(position);
                //

                // address:
                if (data[i].listeerpNumeroVoie != '') {
                    data[i].address = data[i].listeerpNumeroVoie+' '+data[i].listeerpNomVoie+', '+
                    data[i].listeerpCodePostal+' '+data[i].listeerpNomCommune;
                }
                var info =  "<div><p>"+data[i].listeErpNomErp+"<p>"+
                        "<p>"+data[i].address+"<p>"+
                        "<p>Est accessible</p></div>";

                if (data[i].accessible == null) {
                    var info = "<div><p>"+data[i].listeErpNomErp+"<p>"+
                        "<p>"+data[i].address+"<p>"+
                        "<p>Acessible d'ici "+data[i].mois+" "+data[i].annee+"</p></div>";
                }
                var marker = new google.maps.Marker({
                  map: map,
                  position: position,
                  //icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                  info: info
                });
                // // extends the map to fit bounds so we have every marker displayed on the map
                map.fitBounds(bounds);
                // //foreach marker, create an event that open a window with the name of the erp (through info)
                var infowindow = new google.maps.InfoWindow();
                google.maps.event.addListener(marker, 'click', function () {
                  infowindow.setContent(this.info);
                  infowindow.open(map, this);
                });
                markerArray.push(marker);
              }
            }
            message.removeClass('alert-danger');
            message.addClass('alert-success col-lg-10 mx-auto');
            document.getElementById('message').innerHTML = data.length + " établissements correspondant à votre recherche.";
            // Removing classes in case there were any, because of previous search
            $('#result').removeClass('alert-success');
            $('#result').removeClass('alert-danger');
            $('#result').append(result);
          })
        }

        function getSingleErpFromForm(id, message, map, markerArray, geocoder) {
            $.ajax({
                method: 'post',
                url: '',
                data: {data : id},
                dataType: 'json',
                success: function(data) {
                    message.html(data.message);
                    message.removeClass('alert-danger');
                    message.addClass('alert-success');
                    // debugger;
                    if (data.error == true) {
                        message.html(data.message);
                        message.removeClass('alert-success');
                        message.addClass('alert-danger');
                    }
                    geocodeAddress(geocoder, map, markerArray);
                    if (geocodeAddress() == false) {
                        if (data.lat == "0" || data.lng == "0") {
                            if (data.commune) {
                                geocoder.geocode( { 'address': data.commune }, function(results, status) {
                                    if (status == google.maps.GeocoderStatus.OK) {
                                        map.setCenter(results[0].geometry.location);
                                        document.getElementsByClassName('storage')[0].attributes[1].value = results[0].geometry.location.lat();
                                        document.getElementsByClassName('storage')[0].attributes[2].value = results[0].geometry.location.lng();
                                        } 
                                    else {
                                        // alert("Could not find location: " + location);
                                    }
                                });
                            }
                            $('#error_location').html("impossible de localiser précisément l'erp");
                            $('#error_location').addClass('alert-danger');
                        }
                        else if (data.lat !== "0" || data.lng !== "0") {
                            var latLng = {lat: parseFloat(data.lat), lng: parseFloat(data.lng)};
                            var marker = new google.maps.Marker({
                                map: map,
                                position: latLng
                            });
                            map.setCenter(latLng);
                            marker.setMap(map);
                            markerArray.push(marker);
                            // Retrive lat and lng of marker and push it in data attr
                            document.getElementsByClassName('storage')[0].attributes[1].value = marker.position.lat();
                            document.getElementsByClassName('storage')[0].attributes[2].value = marker.position.lng();
                        }
                    }
                },
                error: function(data) {
                }
            })
        }
    </script>
{% endblock %}
