{% extends 'base.html.twig' %}

{% block body %}


    <div class="container-fluid" id="formulaire1">

        <div class="col-lg-4 col-sm-8 col-md-8 mx-auto col-12" id="search-address-wrap">
            <form action="" method="POST" id="form">

                <div class="col-lg-12 col-sm-12 col-md-12 mx-auto col-12">
                    <label for="name"><h2>Recherchez un Nom</h2></label><br>
                    <input style="text-align: center" class="form-control" type="text" id="name" name="name" placeholder="Entrez un nom..." autofocus><br><br>
                </div>

                <div class="col-lg-12 col-sm-12 col-md-12 mx-auto col-12">
                    <label for="adress"><h2>Rechercher une adresse</h2></label><br>
                    <input style="text-align: center" class="form-control" type="text" id="adress" name="adress" placeholder="Entrez une adresse..." autofocus><br><br>
                </div>

                <button id="search-btn" type="submit" class="animated bounceInLeft btn btn-success btn-lg" name="button"><i class="fa fa-search" aria-hidden="true"></i>
                     Rechercher</button>
                <br><br>
                <div class="col-12">
                  <a href="/report/new"><button class="animated bounceInRight btn btn-danger btn-lg" type="button" name="button"><i class="fa fa-flag" aria-hidden="true"></i> Signaler une adresse</button></a>
                </div>
                <!-- <button type ="button" class="animated bounceInRight btn btn-danger btn-lg"><a style="color: #FFFFFF; padding: 0.5em" href="/report/new"><i class="fa fa-flag" aria-hidden="true"></i>
                        Signaler une adresse</a>
                </button> -->
            </form>
        </div>
        <br>
        <br>
        <button class="btn btn-secondary storage" data-lat="45.750000" data-lng="4.850000" data-limit="34" type="button" name="button" >Autour de ce point</button>
        <!-- <div class="storage" data-lat="45.750000" data-lng="4.850000" data-limit="34">Atour de ce point</div> -->
        <button class="btn btn-secondary location-browser">Autour de moi</button>
        <br>
        <div class="row">
            <div class="col-12 col-sm-12 col-md-12 col-lg-10 mx-auto">
                <div id="result" class="alert"></div>
            </div>
            <div class="col-10 mx-auto" id="map"></div>
        </div>

        <br>

        <p class="alert alert-info col-4 mx-auto">Pour consulter les Précautions d'usage, cliquez <a href=".model-id2" data-toggle="modal">ici</a></p>
        <div tabindex="-1" class="modal fade model-id2" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 style="text-decoration: underline">Ce site est un site officiel, développé par les services de l’État dans le Rhône.</h2>
                    </div>
                    <div style="text-align: left" class="modal-body">
                        <p><span style="color: green">Il permet </span>de vérifier, pour un établissement recevant du public donné, s’il satisfait à ses obligations réglementaires en termes d’accessibilité aux personnes en situation de handicap par une démarche menée dans le Rhône : <ul><li>soit par une attestation de conformité.</li><li>soit par un agenda d’accessibilité programmée (Ad’AP) validé par le préfet à travers lequel le propriétaire ou l’exploitant s’est engagé à rendre conforme l’établissement dans un délai donné.</li></ul>
                            <span style="font-weight: bold">AUCUN CONTRÔLE SUR PLACE DES ELEMENTS DECLARATIFS CONTENUS DANS CES DOCUMENTS N’EST EXERCE PAR L’ADMINISTRATION.</span>
                        </p>
                        <p><span style="color: red">Il ne permet pas :</span><ul><li>de connaître les établissements entièrement accessibles : un établissement bénéficiant de dérogations pour les aspects ne respectant pas la réglementation est considéré comme conforme ;</li><li>de connaître l’intégralité des établissements du département du Rhône ayant satisfait à leurs obligations : certains ont pu faire l’objet d’un dépôt de documents en préfecture du siège régional ou du siège social.</li></ul></p>
                        <hr style="height: 1px">
                        <p><span style="font-weight: bold">ATTENTION</span> : ce site est en construction. Malgré tous nos efforts, il est possible que certaines fonctionnalités fonctionnent mal et que certaines données soient incomplètes ou aient fait l’objet d’une erreur de saisie. Merci de nous aider à l’améliorer en signalant tout bug ou erreur sur le nom ou l’adresse de l’ERP.</p>

                        <p>Vous êtes gestionnaire ou propriétaire d’un établissement et vous n’avez déposé ni attestation ni  Ad’AP ? Tout savoir pour régulariser votre situation <a href="http://www.rhone.gouv.fr/Politiques-publiques/Amenagement-du-territoire-urbanisme-construction-logement/Accessibilite/Accessibilite-des-Etablissements-Recevant-du-Public-ERP">ici</a>.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>


    <script>

        $(document).ready(function() {

            $('#form').on('submit', function() {
                var result = $('#result')
                var address = document.getElementById('adress').value
                var name = document.getElementById('name').value
                data = address ? address : null
                if(!data) data = name ? name : null
                data = data.split("|")[1]
                $.ajax({
                    method: 'post',
                    url: '',
                    data: {data : data},
                    dataType: 'json',
                    success: function(data) {
                        result.html(data.message)
                        switch (data.status) {
                            case 'ok':
                                result.removeClass('alert-danger')
                                result.addClass('alert-success')
                                console.log(result)
                                break
                            case 'ko':
                                result.removeClass('alert-success')
                                result.addClass('alert-danger')
                                console.log(result)
                                break
                        }
                    },
                    error: function(data) {
                        console.log(data)
                    }
                })
                return false;
            })
        })

        function initMap() {
            var markerArray = [];// Array of google map marker object
            var bounds = new google.maps.LatLngBounds();
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 45.750000, lng: 4.850000},
                zoom: 13
            });
            var input = /** @type {!HTMLInputElement} */(
                document.getElementById('adress'));

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            document.getElementById('search-btn').addEventListener('click', function() {
                var geocoder = new google.maps.Geocoder();
                geocodeAddress(geocoder, map, markerArray);
            });
            $('.storage').on('click', function() {
              var lat = parseFloat($(this)[0].attributes[1].value);
              var lng = parseFloat($(this)[0].attributes[2].value);
              var limit = parseInt($(this)[0].attributes[3].value);
              for (var i = 0; i < markerArray.length; i++) {
                markerArray[i].setMap(null);
              }
              markerArray = [];
              bounds = new google.maps.LatLngBounds();
              displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray);
            })

            $('.location-browser').on('click', function() {
              if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                  // get current position
                  var lat = position.coords.latitude;
                  var lng = position.coords.longitude;
                  var limit = parseInt($('.storage')[0].attributes[3].value);
                  for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                  }
                  markerArray = [];
                  bounds = new google.maps.LatLngBounds();
                  displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray);
                }, function() {
                  handleLocationError(true, map, map.getCenter());
                });
              } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, map, map.getCenter());
                //displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray);
              }
            })
        }

        function displayMultiplesMarkers(limit, lat, lng, bounds, map, markerArray) {
            $.post('/around',{'limit':limit,'lat':lat,'lng':lng}).done(function(data) {
                // numbers need to be in float
                // iterate over data that is rendered by the controller
                for( i = 0; i < ((data.length) -1); i++ ) {
                  // Setup the position of the marker dynamically via it's info
                    var position = new google.maps.LatLng(parseFloat(data[i].listeERP_latitude), parseFloat(data[i].listeERP_longitude));
                    // extends bounds of the map to the position of the marker
                    bounds.extend(position);
                    // create a blue marker everytime
                    var marker = new google.maps.Marker({
                      map: map,
                      position: position,
                      icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                      info: data[i].liste_ERP_nom_erp,
                    });
                    // extends the map to fit bounds so we have every marker displayed on the map
                    map.fitBounds(bounds);
                    //foreach marker, create an event that open a window with the name of the erp (through info)
                    var infowindow = new google.maps.InfoWindow();
                    google.maps.event.addListener(marker, 'click', function () {
                      infowindow.setContent(this.info);
                      infowindow.open(map, this);
                    });
                    markerArray.push(marker);
                }
                //Keep the color for the last one that represent the location from where the user is searching
                var last = data.pop();
                var position = new google.maps.LatLng(parseFloat(last.listeERP_latitude), parseFloat(last.listeERP_longitude));
                bounds.extend(position);
                var marker = new google.maps.Marker({
                  map: map,
                  position: position,
                  info: last.liste_ERP_nom_erp,
                });
                var infowindow = new google.maps.InfoWindow();
                google.maps.event.addListener(marker, 'click', function () {
                  infowindow.setContent(this.info);
                  infowindow.open(map, this);
                });
                // Push every marker into an array so i can reset the array and clear the map for another research
                markerArray.push(marker);
                map.fitBounds(bounds);
            });

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                }
                marker.setIcon(/** @type {google.maps.Icon} */({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });
        }

        function geocodeAddress(geocoder, resultsMap, markerArray) {
            var address = document.getElementById('adress').value
            var name = document.getElementById('name').value
            data = address ? address : null
            if(!data) data = name ? name : null
            data = data.split("|")[1]
            geocoder.geocode({'address': data}, function(results, status) {
                if (status === 'OK') {
                    resultsMap.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: resultsMap,
                        position: results[0].geometry.location
                    });
                    markerArray.push(marker);
                    // Retrive lat and lng of marker and push it in data attr
                    document.getElementsByClassName('storage')[0].attributes[1].value = marker.position.lat();
                    document.getElementsByClassName('storage')[0].attributes[2].value = marker.position.lng();
                } else {
                }
            });
        }
    </script>




    <!-- <div class="" id="warnings-panel"></div> -->

<!-- *************** SCRIPT RECUPERÉ ************** -->
    <!-- <script>

        function initMap() {
          var geocoder = new google.maps.Geocoder();
          var directionsService = new google.maps.DirectionsService;
          var directionsDisplay = new google.maps.DirectionsRenderer;
          var map = new google.maps.Map(document.getElementById('map'), {
              zoom: 14,
              center: {lat: 45.750000, lng: 4.850000}
          });
          var bounds = new google.maps.LatLngBounds();
          var markers = []; // array of position
          var markerArray = []; // array of marker object
          var stepDisplay = new google.maps.InfoWindow;
          directionsDisplay.setMap(map);
          document.getElementById('search-btn').addEventListener('click', function() {
              geocodeAddress(geocoder, map, markerArray);
          });
          $('.directions-btn').on('click', function() {
            getAndDisplayDirection(map, bounds, markers, markerArray);
          })
          $('.route').on('click', function() {
             calculateAndDisplayRoute(directionsService, directionsDisplay, markerArray, stepDisplay, map)
          })
          //******************************
          // *** INITIALISAITON ***
          // *** END INITIALISATION ***
           //  document.getElementById('search-btn').addEventListener('click', function() {
           //     geocodeAddress(geocoder, map, markers);
           // });
        }
        function geocodeAddress(geocoder, resultsMap, markerArray) {
            var address = document.getElementById('adress').value;
            geocoder.geocode({'address': address}, function(results, status) {
                if (status === 'OK') {
                  for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                  }
                  markerArray = [];
                    resultsMap.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: resultsMap,
                        position: results[0].geometry.location,
                    });
                    markerArray.push(marker);
                    // console.log(markerArray);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
        function calculateAndDisplayRoute(directionsService, directionsDisplay, markerArray, stepDisplay, map) {
          if (markerArray.length > 0) {
            // First, remove any existing markers from the map.
            for (var i = 0; i < markerArray.length; i++) {
              markerArray[i].setMap(null);
            }
            var origin = markerArray[0];
            var destination = markerArray[1];
            directionsService.route({
              origin: {lat: origin.position.lat(), lng: origin.position.lng()},
              destination: {lat: destination.position.lat(), lng: destination.position.lng()},
              travelMode: 'WALKING'
            }, function(response, status) {
              if (status === 'OK') {
                directionsDisplay.setDirections(response);
                showSteps(response, markerArray, stepDisplay, map);
              } else {
                window.alert('Directions request failed due to ' + status);
              }
            });
          }
        }
        function showSteps(directionResult, markerArray, stepDisplay, map) {
        // For each step, place a marker, and add the text to the marker's infowindow.
        // Also attach the marker to an array so we can keep track of it and remove it
        // when calculating new routes.
        var myRoute = directionResult.routes[0].legs[0];
        // display distance and duration:
        // directionResult.routes[0].legs[0].distance.text
        // directionResult.routes[0].legs[0].duration.text
        // Warning :
        // directionResult.routes[0].warnings[0]
        for (var i = 0; i < myRoute.steps.length; i++) {
          var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
          marker.setMap(map);
          marker.setPosition(myRoute.steps[i].start_location);
          attachInstructionText(
              stepDisplay, marker, myRoute.steps[i].instructions, map);
          // start and end location of each step:
          // directionResult.routes[0].legs[0].steps[i].start_location.lat()
          // directionResult.routes[0].legs[0].steps[i].start_location.lng()
          //
          // directionResult.routes[0].legs[0].steps[i].end_location.lat()
          // directionResult.routes[0].legs[0].steps[i].end_location.lng()
          // debugger;
        }
      }
      function attachInstructionText(stepDisplay, marker, text, map) {
       google.maps.event.addListener(marker, 'click', function() {
         // Open an info window when the marker is clicked on, containing the text
         // of the step.
         stepDisplay.setContent(text);
         stepDisplay.open(map, marker);
       });
     }
        function getAndDisplayDirection(map, bounds, markers, markerArray) {
          // console.log(markerArray);
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
              // array instead of object {}
              var pos = [position.coords.latitude,position.coords.longitude];
              var center = [45.750000,4.850000];
              markers.push(pos);
              markers.push(center);
              // Multiple markers on a single map
              for( i = 0; i < markers.length; i++ ) {
                var position = new google.maps.LatLng(markers[i][0], markers[i][1]);
                bounds.extend(position);
                marker = new google.maps.Marker({
                  map: map,
                  position: position,
                });
                map.fitBounds(bounds);
                markerArray.push(marker);
              }
            }, function() {
              handleLocationError(true, map, map.getCenter());
            });
          } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, map, map.getCenter());
          }
          //********************************
        }
    </script>-->
{% endblock %}
